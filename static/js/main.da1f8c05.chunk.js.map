{"version":3,"sources":["threeD/Lights.tsx","threeD/Monkey.tsx","threeD/Siders.tsx","threeD/Main.tsx","components/ThreeD/ThreeD.tsx","components/Header/Header.tsx","containers/LandingPage/LandingPage.tsx","App.tsx","index.tsx"],"names":["Lights","main","monkeyLight","monkeyHelper","this","THREE","Math","PI","position","set","scene","add","createMonkeyLight","update","color","setHex","getHex","Monkey","monkey","MTLLoader","load","materials","preload","objLoader","OBJLoader","setMaterials","object","traverse","child","isMesh","material","xhr","console","log","loaded","total","error","e","x","clientX","renderer","domElement","clientWidth","y","clientY","clientHeight","rotation","loadMonkey","document","addEventListener","onMouseMove","bind","Siders","leftKnot","rightKnot","leftKnotProps","rightKnotProps","lastUpdateTime","radiusCurrValue","radius","tube","tubularSegments","radialSegments","p","q","Date","getTime","newLeftGeometry","geometry","dispose","newRightGeometry","start","range","step","curr","p1","p2","regenerateKnotGeometries","createMaterial","createLeftKnot","createRightKnot","Main","canvas","camera","stats","monkeyInstance","lightsInstance","sidersInstance","background","window","innerWidth","innerHeight","z","setSize","Stats","body","appendChild","dom","init","aspect","updateProjectionMatrix","render","requestAnimationFrame","animationLoop","updateHelpers","updateKnots","changeLightColours","createRenderer","createCamera","createScene","createStats","createMonkeyInstance","createLightsInstance","createSidersInstance","onWindowResize","ThreeD","useState","setWebGLMainInstance","canvasRef","createRef","useEffect","current","webGLMainInstance","ref","Header","className","LandingPage","App","path","exact","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.da1f8c05.chunk.js","sourcesContent":["import * as THREE from 'three/build/three.module';\nimport Main from './Main';\n\nclass Lights {\n\n    private main: Main;\n    public monkeyLight!: THREE.SpotLight;\n    private monkeyHelper!: THREE.SpotLightHelper;\n\n    constructor(main: Main) {\n        this.main = main;\n    }\n\n    private createMonkeyLight(): void {\n        this.monkeyLight = new THREE.SpotLight(\"white\", 10, 10, Math.PI / 10, .4, 1);\n        this.monkeyLight.position.set(2.5, 2.5, 7)\n        this.main.scene.add(this.monkeyLight);\n\n        this.monkeyHelper = new THREE.SpotLightHelper(this.monkeyLight);\n        // this.main.scene.add(this.monkeyHelper);\n    }\n\n    public init():void {\n        this.createMonkeyLight();\n    }\n\n    public updateHelpers():void {\n        this.monkeyHelper.update()    \n    }\n\n    public changeLightColours(): void {\n        this.monkeyLight.color.setHex((this.monkeyLight.color.getHex() + 1000) % 1000000);\n    }\n\n\n}\n\nexport default Lights;","import Main from './Main';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport * as THREE from 'three/build/three.module';\n\nclass Monkey {\n\n    private main: Main;\n    private monkey!: THREE.Mesh;\n\n    constructor(main: Main) {\n        this.main = main;\n    }\n\n    private loadMonkey(): void {\n        const loader = new MTLLoader();\n        loader.load(\n            'three-assets/monkey.mtl',\n            (materials) => {\n                materials.preload();\n\n                const objLoader: OBJLoader = new OBJLoader();\n                objLoader.setMaterials(materials);\n                objLoader.load(\n                    'three-assets/monkey.obj',\n                    (object) => {\n                        object.traverse((child) => {\n                            if ((child as THREE.Mesh).isMesh) {\n                                this.monkey = child as THREE.Mesh;\n                                const mesh = child as THREE.Mesh;\n                                (mesh.material as THREE.MeshPhongMaterial).color.setHex(0xFFFFFF);\n                            }\n                        })\n                        this.main.scene.add(object);\n                    },\n                    (xhr) => {\n                        console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n                    },\n                    (error) => {\n                        console.log('An error happened');\n                    }\n                );\n            },\n            (xhr) => {\n                console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n            },\n            (error) => {\n                console.log('An error happened');\n            }\n        );\n    }\n\n    private onMouseMove(e: MouseEvent): void {\n        if (this.monkey) {\n            const x = (e.clientX / this.main.renderer.domElement.clientWidth) * 2 - 1;\n            const y = -(e.clientY / this.main.renderer.domElement.clientHeight) * 2 + 1;\n            this.monkey.rotation.x = -y;\n            this.monkey.rotation.y = x;\n        }\n    }\n\n    public init(): void {\n        this.loadMonkey();\n        document.addEventListener(\"mousemove\", this.onMouseMove.bind(this))\n    }\n\n\n\n}\n\nexport default Monkey;","import * as THREE from 'three/build/three.module';\nimport Main from './Main';\n\nclass Siders {\n\n    private main: Main;\n    private leftKnot!: THREE.Mesh;\n    private rightKnot!: THREE.Mesh;\n    private material!: THREE.MeshNormalMaterial;\n    private leftKnotProps: { radius: number, tube: number, tubularSegments: number, radialSegments: number, p: number, q: number };\n    private rightKnotProps: { radius: number, tube: number, tubularSegments: number, radialSegments: number, p: number, q: number };\n    private lastUpdateTime: number;\n    private radiusCurrValue: number;\n\n    constructor(main: Main) {\n        this.main = main;\n        this.leftKnotProps = { radius: 0.3, tube: 0.1, tubularSegments: 20, radialSegments: 20, p: 10, q: 20 };\n        this.rightKnotProps = { radius: 0.3, tube: 0.1, tubularSegments: 20, radialSegments: 20, p: 10, q: 20 };\n        this.lastUpdateTime = new Date().getTime();\n        this.radiusCurrValue = 1;\n    }\n\n    private createMaterial(): void {\n        this.material = new THREE.MeshNormalMaterial();\n    }\n\n    private regenerateKnotGeometries(): void {\n        // LEFT\n        const newLeftGeometry = new THREE.TorusKnotGeometry(\n            this.leftKnotProps.radius, this.leftKnotProps.tube, this.leftKnotProps.tubularSegments, this.leftKnotProps.radialSegments, this.leftKnotProps.p, this.leftKnotProps.q\n        );\n        this.leftKnot.geometry.dispose();\n        this.leftKnot.geometry = newLeftGeometry;\n        // RIGHT\n        const newRightGeometry = new THREE.TorusKnotGeometry(\n            this.rightKnotProps.radius, this.rightKnotProps.tube, this.rightKnotProps.tubularSegments, this.rightKnotProps.radialSegments, this.rightKnotProps.p, this.rightKnotProps.q\n        );\n        this.rightKnot.geometry.dispose();\n        this.rightKnot.geometry = newRightGeometry;\n    }\n\n    private createLeftKnot(): void {\n        const geometry = new THREE.TorusKnotGeometry(this.leftKnotProps.radius, this.leftKnotProps.tube, this.leftKnotProps.tubularSegments, this.leftKnotProps.radialSegments, this.leftKnotProps.p, this.leftKnotProps.q);\n        this.leftKnot = new THREE.Mesh(geometry, this.material);\n        this.leftKnot.position.x = -3;\n        this.main.scene.add(this.leftKnot);\n    }\n\n    private createRightKnot(): void {\n        const geometry = new THREE.TorusKnotGeometry(this.rightKnotProps.radius, this.rightKnotProps.tube, this.rightKnotProps.tubularSegments, this.rightKnotProps.radialSegments, this.rightKnotProps.p, this.rightKnotProps.q);\n        this.rightKnot = new THREE.Mesh(geometry, this.material);\n        this.rightKnot.position.x = 3;\n        this.main.scene.add(this.rightKnot);\n    }\n\n    private rotateKnots(): void {\n        // this.leftKnot.rotation.x += 0.1;\n        this.leftKnot.rotation.y += 0.1;\n    }\n\n    private waveFunction(start: number, range: number, step: number): number {\n        const curr = this.radiusCurrValue;\n        const p1 = curr % ((range - step) * 2);\n        const p2 = curr % (range - step);\n        this.radiusCurrValue = step + (this.radiusCurrValue % ((range-step) * 2));\n        if (p1 === p2) {\n            return p1 + start;\n        }\n        return p1 - p2 * 2 + start;\n    }\n\n    public updateKnots(): void {\n        if (new Date().getTime() - this.lastUpdateTime > 1) {\n            // this.leftKnotProps.radius = this.waveFunction(.2, .5, .1);\n            // console.log(this.leftKnotProps.radius, 'Siders.tsx', 'line: ', '64');\n            this.leftKnotProps.p = 1 + (this.leftKnotProps.p % 20);\n            this.rightKnotProps.p = 1 + (this.rightKnotProps.p % 20);\n            this.regenerateKnotGeometries();\n            this.lastUpdateTime = new Date().getTime();\n        }\n\n        // this.rotateKnots();\n    }\n\n    public init(): void {\n        this.createMaterial();\n        this.createLeftKnot();\n        this.createRightKnot();\n    }\n\n}\n\nexport default Siders;","import * as THREE from 'three/build/three.module';\nimport Stats from 'three/examples/jsm/libs/stats.module'\nimport Lights from './Lights';\nimport Monkey from './Monkey';\nimport Siders from './Siders';\n\nclass Main {\n\n    public canvas: HTMLCanvasElement;\n    public renderer!: THREE.WebGLRenderer;\n    public camera!: THREE.PerspectiveCamera;\n    public scene!: THREE.Scene;\n    public stats!: Stats;\n    public monkeyInstance!: Monkey;\n    public lightsInstance!: Lights;\n    public sidersInstance!: Siders;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n    }\n\n    private createScene(): void {\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(\"black\");\n    }\n\n    private createCamera(): void {\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, .1, 1000);\n        this.camera.position.z = 5;\n    }\n\n    private createRenderer(): void {\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvas });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    private createStats(): void {\n        this.stats = Stats();\n        document.body.appendChild(this.stats.dom)\n    }\n\n    private createMonkeyInstance(): void {\n        this.monkeyInstance = new Monkey(this);\n        this.monkeyInstance.init();\n    }\n\n    private createLightsInstance(): void {\n        this.lightsInstance = new Lights(this);\n        this.lightsInstance.init();\n    }\n\n    private createSidersInstance(): void {\n        this.sidersInstance = new Siders(this);\n        this.sidersInstance.init();\n    }\n\n    private onWindowResize(): void {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.render();\n    }\n\n    private animationLoop() {\n        requestAnimationFrame(this.animationLoop.bind(this));\n        this.lightsInstance.updateHelpers();\n        this.sidersInstance.updateKnots();\n        this.lightsInstance.changeLightColours();\n        this.renderer.render(this.scene, this.camera);\n        this.stats.update();\n    }\n\n    public init(): void {\n        this.createRenderer();\n        this.createCamera();\n        this.createScene();\n        this.createStats();\n\n        this.createMonkeyInstance();\n        this.createLightsInstance();\n        this.createSidersInstance();\n\n        window.addEventListener('resize', this.onWindowResize.bind(this), false);\n        this.animationLoop();\n    }\n\n    private render(): void {\n        this.renderer.render(this.scene, this.camera);\n    }\n\n}\n\nexport default Main;","import { createRef, useEffect, useState } from 'react';\nimport './ThreeD.css';\nimport Main from '../../threeD/Main';\n\nconst ThreeD = () => {\n    const [webGLMainInstance, setWebGLMainInstance] = useState<Main>();\n    const canvasRef = createRef<HTMLCanvasElement>();\n  \n    useEffect(() => {\n      if (canvasRef && canvasRef.current) {\n        const webGLMainInstance: Main = new Main(canvasRef.current);\n        setWebGLMainInstance(webGLMainInstance);\n        webGLMainInstance.init();\n      }\n  \n    }, []);\n  \n    return (\n      <canvas ref={canvasRef}></canvas>\n    );\n};\n\nexport default ThreeD;","import './Header.css';\nimport ThreeD from '../ThreeD/ThreeD';\n\nconst Header = () => {\n\n    return (\n        <section className=\"header-section\">\n            <ThreeD />\n        </section>\n    );\n};\n\nexport default Header;","import './LandingPage.css';\nimport Header from '../../components/Header/Header';\n\nconst LandingPage = () => {\n\n    return (\n        <main className=\"landing-page-main\">\n            <Header />\n        </main>\n    );\n};\n\nexport default LandingPage;","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom/cjs/react-router-dom';\nimport LandingPage from './containers/LandingPage/LandingPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          {LandingPage}\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}